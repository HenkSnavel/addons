#!/command/with-contenv bashio
# shellcheck shell=bash
# ==============================================================================
# Home Assistant Add-on: Dendrite
# Initializes the container during startup
# ==============================================================================
declare postgres_data
declare version_file
declare new_install

postgres_data=/data/postgres
version_file=/data/version
new_install=false;

# Applies permission to the data directory for the postgres user
applyPermissions () {
	chown -R postgres:postgres ${postgres_data}
	chmod 700 ${postgres_data}
}

# Initializes the data directory
initializeDataDirectory () {
	# Init data-directory
    bashio::log.info "Initializing new postgres directory.."
	mkdir -p ${postgres_data}
	applyPermissions
	su - postgres -c "initdb -D ${postgres_data}"

	# Set Password protect IPv4 hosts by default
	echo "host    all             all             0.0.0.0/0               md5" >> ${postgres_data}/pg_hba.conf
	echo "local    all             all                                    md5" >> ${postgres_data}/pg_hba.conf
	echo "local    all             all                                   peer" >> ${postgres_data}/pg_hba.conf
	# Set Listen on all addresses (*)
	sed -r -i "s/[#]listen_addresses.=.'.*'/listen_addresses\ \=\ \'\*\'/g" ${postgres_data}/postgresql.conf
	bashio::log.info "Initialized new postgres directory.."
}

# Upgrades the PostgreSQL databases
# $1: The current version
# $2: The new version
upgradePostgreSQL() {
	local fromVersion=${1}
	local toVersion=${2}

	bashio::log.notice "Upgrading databases now. This could take a while. Please be patient..."

	# Move the old data directory out of our way..
	mv ${postgres_data} ${postgres_data}${fromVersion}

	# And upgrade PostgreSQL
	bashio::log.notice "Upgrading PostgreSql from ${fromVersion} to ${toVersion}.."

	# Backup old HBA.conf and create a temp one...
	mv ${postgres_data}${fromVersion}/pg_hba.conf ${postgres_data}${fromVersion}/pg_hba_backup.conf
	echo "local    all             all                                     trust" > ${postgres_data}${fromVersion}/pg_hba.conf

	#Start postgres on the old data-dir
	bashio::log.info "Starting PostgreSQL-${fromVersion} first.."
	su - postgres -c "/usr/libexec/postgresql${fromVersion}/postgres -D ${postgres_data}${fromVersion}" &
	postgres_pid=$!

	# Wait for postgres to become available..
	while ! psql -X -U "postgres" postgres -c "" 2> /dev/null; do
		sleep 1
	done

	# Stop server
	bashio::log.notice "Stopping PostgreSql ${fromVersion}.."
	kill ${postgres_pid}
	wait ${postgres_pid} || true
	bashio::log.notice "Stopped PostgreSql ${fromVersion}.."

	# Restore HBA.CONF
	rm ${postgres_data}${fromVersion}/pg_hba.conf
	mv ${postgres_data}${fromVersion}/pg_hba_backup.conf ${postgres_data}${fromVersion}/pg_hba.conf

	# Create a fresh data-directory
	initializeDataDirectory

	# And upgrade!
	bashio::log.notice "Upgrading databases.."
	cd ${postgres_data}${fromVersion}
	if su -c "pg_upgrade --old-bindir=/usr/libexec/postgresql${fromVersion} --new-bindir=/usr/libexec/postgresql${toVersion} --old-datadir=${postgres_data}${fromVersion} --new-datadir=${postgres_data} --link --username=postgres" -s /bin/sh postgres; then
		bashio::log.notice "PostgreSQL upgraded succesfully!"
		# Remove the old cluster...
		rm -r ${postgres_data}${fromVersion}
		return 0
	else
		# copy logs
		cp -r /data/postgres/pg_upgrade_output.d  ${postgres_data}${fromVersion} || true

		# Rollback..
		rm -r ${postgres_data}
		mv ${postgres_data}${fromVersion} ${postgres_data}

		bashio::log.error "PostgreSQL could not upgrade! Please inspect any errors in the lines above!"
		return 1
	fi
}


# Prepare /tmp/pg_stat_tmp directory
mkdir -p /tmp/pg_stat_tmp
ls -la /tmp/pg_stat_tmp
chown postgres:postgres /tmp/pg_stat_tmp || echo "Failed to change ownership of /tmp/pg_stat_tmp" >&2
ls -la /tmp/pg_stat_tmp

if ! bashio::fs.directory_exists "${postgres_data}"; then
    bashio::log.info "Detected a fresh installation! Welcome! We're setting things up for you.."
    new_install=true
else
    touch ${version_file}
	# Always re-apply permissions, because they seem to be reset after a snapshot restore
	applyPermissions
fi

# Initialize for new installs
if bashio::var.true "${new_install}"; then
	touch /data/firstrun
	bashio::addon.version > ${version_file}
	initializeDataDirectory
else

	# Check if we need to restore again.
	if $(bashio::config.true 'retry_upgrade'); then
		if bashio::fs.directory_exists "${postgres_data}14"; then
			bashio::log.notice "An aborted upgrade from Postgres 14 was detected. Restoring.."
			rm -r ${postgres_data}
			mv ${postgres_data}14 ${postgres_data}
		else
			bashio::config.suggest.false 'retry_upgrade' 'This option is only for temporary reasons: to recover from a failed upgrade.'
		fi
	fi

	# Check if we need to upgrade from 12 to 15
	if [[ $(< ${postgres_data}/PG_VERSION) == "12" ]]; then
		bashio::log.notice "A database upgrade is required from Postgres 12."
		bashio::log.error "Upgrade was not succesful. This addon version does no longer support Postgres 12. Please upgrade to the previous version of the addon and upgrade to Postgres 14 first."
		exit 1
	fi

	# Check if we need to upgrade from 14 to 15
	if [[ $(< ${postgres_data}/PG_VERSION) == "14" ]]; then
		bashio::log.notice "A database upgrade is required from Postgres 14."
		if upgradePostgreSQL 14 15; then
			bashio::log.notice "Upgrade was succesful"
		else
			bashio::log.error "Upgrade was not succesful."
			exit 1
		fi
	fi
fi

bashio::log.info "init-addon done"

# Apply max connections
bashio::log.info "Applying max connections.."
sed -i -e "/max_connections =/ s/= .*/= $(bashio::config 'postgres_max_connections')/" ${postgres_data}/postgresql.conf
bashio::log.info "Applied max connections.."
