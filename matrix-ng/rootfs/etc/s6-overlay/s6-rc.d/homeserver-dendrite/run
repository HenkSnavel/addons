#!/command/with-contenv bashio
# shellcheck shell=bash
# ==============================================================================
# Start the dendrite service
# s6-overlay docs: https://github.com/just-containers/s6-overlay
# ==============================================================================

# Use until to wait until the /data/first-run file has been deleted.
# This file is created by the postgres container when it is first run.
bashio::log.info "homeserver-dendrite is waiting for Postgres to finish first run..."
until [ ! -f /data/first-run ]; do sleep 1; done

bashio::log.info "homeserver-dendrite is waiting for Postgres..."
until psql -U "postgres" postgres -c "" 2> /dev/null; do sleep 1; done
bashio::log.info "homeserver-dendrite is connected to Postgres..."

## Run your program
cd /usr/app
config_file="/data/homeserver-dendrite.yaml"

# Only generate config file if one doesn't already exist.
if [ ! -f $config_file ]; then
    generate-config \
        -dir /usr/app/ \
        -db "postgresql://postgres:homeassistant@localhost:5432/dendrite?sslmode=disable" \
        -server $(bashio::config 'server_name') > $config_file
    # Generate a random 15 character string for the registration_shared_secret
    RANDOM_SECRET=$(dd if=/dev/urandom bs=1 count=15 2>/dev/null | od -An -tx1 | tr -d ' \n')
    yq eval '.client_api.registration_shared_secret = "'$RANDOM_SECRET'"' -i $config_file
fi
# On subsequent runs we will use yq to write the above changes to the existing config file
if [ -f $config_file ]; then
    yq eval '.global.database.connection_string = "postgresql://postgres:homeassistant@localhost:5432/dendrite?sslmode=disable"' -i $config_file
    yq eval '.global.server_name = "'$(bashio::config 'server_name')'"' -i $config_file
    yq eval '.global.private_key = "'$(bashio::config 'private_key')'"' -i $config_file
fi

# TODO: We can write any other changes to the existing config file here
# yq eval '.global.disable_federation = '$(bashio::config 'disable_federation')'' -i $config_file

# Clear the existing app_service_api.config_files array
yq eval '.app_service_api.config_files = []' -i $config_file
# Check the /data directory for any appservice_*.yaml files and add them to the Dendrite config
for appservice_file in /data/*-registration.yaml; do
    [ -e "$appservice_file" ] || continue
    yq eval '.app_service_api.config_files += ["'$appservice_file'"]' -i $config_file
done

dendrite --config $config_file
